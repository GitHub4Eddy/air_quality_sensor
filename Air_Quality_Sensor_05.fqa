{"name":"Air Quality Sensor","type":"com.fibaro.genericDevice","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_502"},"sections":{"items":[{"components":[{"name":"label","style":{"weight":"1.2"},"text":"Label","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_502"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"ipAddress","value":"192.168.1.122"},{"name":"path","value":"/data.json"},{"name":"interval","value":"146"},{"name":"userID","value":"2"},{"name":"bme280Sensor","value":"true"},{"name":"icon","value":"1020"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP AIR QUALITY SENSOR\n\n-- This QuickApp reads the PM2.5, PM10, Temperature, Humidity and Aur Pressure values directly from a sensor. \n-- With this sensor you can measure air quality yourself. \n-- This QuickApp will send notifications when PM2.5 or PM10 readings reach a breakpoint. \n\n\n-- Version 0.5 (23rd October 2020)\n\n-- Changes version 0.5\n   -- With the new firmware and API function, solved a small bug in presenting WiFi dBm\n   -- Changed humidity and air pressure values to zero decimals\n   -- Added air pressure unit text \"hPa\"\n   -- Changed the master device to \"Generic Device\" \n   -- Added QuickApp Variable for user defined icon master device\n   -- Solved a bug preventing creation of QuickApp Variable bme280Sensor\n\n-- Changes version 0.4\n   -- Added support for BME280 sensor (temperature, humidity and air pressure)\n   -- Added QuickApp Variable bme280Sensor (true or false) to indicate the pressence of a BME280 sensor otherwise a DHT22 sensor is assumed\n   -- Reduced the amount of labels, now only one label\n   -- Removed the firmware version from the log under the icon\n\n-- Changes version 0.3\n   -- error message instead of debug message in case of an error\n   -- Changed method of adding QuickApp variables, so they can be edited\n   -- Added network error to log (under icon)\n\n-- Changes version 0.2\n   -- Changed label6 from \"age\" to time of the measurement\n   -- Added automatic creation of child devices for Temperature, Humidity, PM2.5 and PM10 (with great help from @jgab from forum.fibaro.com)\n   -- Added the value (Temperature, Humidity, PM2.5 and PM10) to the child devices, This can be used in, for instance, extra scenes and shows in the mobile app and dashboard. \n   -- Added a short text of the air quality (GOOD, SATISFACTORY, etc.) to the icons in the dashboard (with great help of @petergebruers and 10der from forum.fibaro.com)\n   -- Added the trend (up, down, equal) to the sort text of the air quality\n\n-- My configuration of the DIY air quality sensor:\n   -- NodeMCU ESP8266 V2 opensource WiFi board\n   -- Nova SDS011 air quality sensor\n   -- BME280 temperature, humidity and pressure sensor\n\n-- See also https://luftdaten.info\n-- See also https://sensor.community/en/sensors/airrohr/ how to simply build the air quality sensor yourself\n-- See also for map of measurements: https://sensor.community/en/\n-- See also for CVS files: https://archive.luftdaten.info\n-- See also https://github.com/opendata-stuttgart/\n\n-- Variables (mandatory): \n   -- ipAddress = IP address of your sensor\n   -- path = Path behind the IP address, normally /data.json\n   -- interval = Number in seconds, the sensor normally is updated every 145 seconds\n   -- userID = User id to notify of PM2.5 / PM10 breakpoints\n   -- bme280Sensor = true or false use of BME280 temperature, humidity and air pressure sensor\n   -- icon = User defined icon number (add the icon via an other device and lookup the number)\n\n-- PM2.5 breakpoints\n   -- 0 - 30    GOOD (Minimal)\n   -- 31 - 60   SATISFACTORY (Minor breathing discomfort to sensitive people)\n   -- 61 - 90   MODERATELY POLLUTED Breathing discomfort to asthma patients, elderly and children\n   -- 91 - 120  POOR (Breathing discomfort to all)\n   -- 121 - 250 VERY POOR (Respiratory illness on prolonged exposure)\n   -- 250+      SEVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\n\n-- PM10 breakpoints\n   -- 0 - 50    GOOD (Minimal)\n   -- 51 - 100  SATISFACTORY (Minor breathing discomport to sensitive people)\n   -- 101 - 250 MODERATELY POLLUTED Breathing discomfoort to asthma patients, elderly and children\n   -- 251 - 350 POOR (Breathing discomfort to all)\n   -- 351 - 430 VERY POOR (Respiratory illness on prolonged exposure)\n   -- 430+      SEVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\n\n\n-- No editing of this code is needed \n\nclass 'PolutionSensorTemp'(QuickAppChild)\nfunction PolutionSensorTemp:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Air Quality Temperature sensor initiated, deviceId:\",self.id)\nend\n\nfunction PolutionSensorTemp:updateValue(data,userID) \n  self:updateProperty(\"value\",tonumber(data.temperature)) \nend\n\nclass 'PolutionSensorHumid'(QuickAppChild)\nfunction PolutionSensorHumid:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Air Quality Humidity sensor initiated, deviceId:\",self.id)\nend\n\nfunction PolutionSensorHumid:updateValue(data,userID) \n  self:updateProperty(\"value\",tonumber(data.humidity)) \nend\n\nclass 'PolutionSensorPressure'(QuickAppChild)\nfunction PolutionSensorPressure:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Air Quality Pressure sensor initiated, deviceId:\",self.id)\nend\n\nfunction PolutionSensorPressure:updateValue(data,userID) \n  self:updateProperty(\"value\",tonumber(data.pressure)) \n  self:updateProperty(\"unit\", \"hPa\")\nend\n\nclass 'PolutionSensorPM25'(QuickAppChild)\nfunction PolutionSensorPM25:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Air Quality PM2.5 sensor initiated, deviceId:\",self.id)\nend\n\nfunction PolutionSensorPM25:updateValue(data,userID)  \n\n  local pm25,pm25prev = data.pm25,data.pm25prev\n\n  -- Send notifications when PM2.5 level reach breakpoints \n  -- PM2.5 breakpoint 0 - 30 GOOD (Minimal)\n  if (tonumber(pm25) > 0 and tonumber(pm25) <= 30) then\n    pm25Text = \"GOOD\"\n    if (pm25prev > 30) then\n      fibaro.alert(\"push\", {userID}, \"PM2.5 \"..pm25 ..\" µg/m³\" ..\" level GOOD (Minimal)\")\n      self:debug(\"PM2.5 level GOOD (Minimal)\",pm25 ..\" µg/m³\")\n    end\n  end\n  -- PM2.5 breakpoint 31 - 60 SATISFACTORY (Minor breathing discomfort to sensitive people)\n  if (tonumber(pm25) >= 31 and tonumber(pm25) <= 60) then\n    pm25Text = \"SATISFACTORY\"\n    if (pm25prev < 31 or pm25prev > 60) then\n      fibaro.alert(\"push\", {userID}, \"PM2.5 \"..pm25 ..\" µg/m³\" ..\" level SATISFACTORY (Minor breathing discomfort to sensitive people)\")\n      self:debug(\"PM2.5 level SATISFACTORY (Minor breathing discomfort to sensitive people)\",pm25 ..\" µg/m³\")\n    end\n  end\n  -- PM2.5 breakpoint 61 - 90 MODERATELY POLLUTED Breathing discomfort to asthma patients, elderly and children\n  if (tonumber(pm25) >= 61 and tonumber(pm25) <= 90) then\n    pm25Text = \"MODERATELY POLLUTED\"\n    if (pm25prev < 61 or pm25prev > 90) then\n      fibaro.alert(\"push\", {userID}, \"PM2.5 \"..pm25 ..\" µg/m³\" ..\" level MODERATELY POLLUTED Breathing discomfort to asthma patients, elderly and children\")\n      self:debug(\"PM2.5 level MODERATELY POLLUTED Breathing discomfort to asthma patients, elderly and children\",pm25 ..\" µg/m³\")\n    end \n  end\n  -- PM2.5 breakpoint 91 - 120 POOR (Breathing discomfort to all)\n  if (tonumber(pm25) >= 91 and tonumber(pm25) <= 120) then\n    pm25Text = \"POOR\"\n    if (pm25prev < 91 or pm25prev > 120) then\n      fibaro.alert(\"push\", {userID}, \"PM2.5 \"..pm25 ..\" µg/m³\" ..\" level POOR (Breathing discomfort to all)\")\n      self:debug(\"PM2.5 level POOR (Breathing discomfort to all)\",pm25 ..\" µg/m³\")\n    end\n  end\n  -- PM2.5 breakpoint 120 - 250 VERY POOR (Respiratory illness on prolonged exposure)\n  if (tonumber(pm25) >= 120 and tonumber(pm25) <= 250) then\n    pm25Text = \"VERY POOR\"\n    if (pm25prev < 121 or pm25prev > 250) then\n      fibaro.alert(\"push\", {userID}, \"PM2.5 \"..pm25 ..\" µg/m³\" ..\" level VERY POOR (Respiratory illness on prolonged exposure)\")\n      self:debug(\"PM2.5 level VERY POOR (Respiratory illness on prolonged exposure)\",pm25 ..\" µg/m³\")\n    end\n  end\n  -- PM2.5 breakpoint 250+ SEVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\n  if (tonumber(pm25) >= 250 ) then\n    pm25Text = \"SEVERE\"\n    if (pm25prev < 250) then\n      fibaro.alert(\"push\", {userID}, \"PM2.5 \"..pm25 ..\" µg/m³\" ..\" level SEVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\")\n      self:debug(\"PM2.5 level EVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\",pm25 ..\" µg/m³\")\n    end\n  end\n\n  if tonumber(pm25) > tonumber(pm25prev) then\n    pm25Trend = \" ↑\"\n  elseif tonumber(pm25) < tonumber(pm25prev) then\n    pm25Trend = \" ↓\"\n  else\n    pm25Trend = \" =\"\n  end \n\n  -- Update properties for PM2.5 sensor\n  self:updateProperty(\"value\", tonumber(pm25)) \n  self:updateProperty(\"unit\", \"㎍/㎥\")\n  self:updateProperty(\"log\", pm25Text ..pm25Trend)\nend\n\nclass 'PolutionSensorPM10'(QuickAppChild)\nfunction PolutionSensorPM10:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Air Quality PM10 sensor initiated, deviceId:\",self.id)\nend\n\nfunction PolutionSensorPM10:updateValue(data,userID) \n  local pm10,pm10prev = data.pm10,data.pm10prev\n\n  -- Send notifications when PM10 level reach breakpoints \n  -- PM10 breakpoint 0 - 50 GOOD (Minimal)\n  if (tonumber(pm10) > 0 and tonumber(pm10) <= 50) then\n    pm10Text = \"GOOD\"\n    if (pm10prev > 50) then\n      fibaro.alert(\"push\", {userID}, \"PM10 \"..pm10 ..\" µg/m³\" ..\" level GOOD (Minimal)\")\n      self:debug(\"PM10 level GOOD (Minimal)\",pm10 ..\" µg/m³\")\n    end\n  end\n  -- PM10 breakpoint 51 - 100 SATISFACTORY (Minor breathing discomfort to sensitive people)\n  if (tonumber(pm10) >= 51 and tonumber(pm10) <= 100) then\n    pm10Text = \"SATISFACTORY\"\n    if (pm10prev < 51 or pm10prev > 100) then\n      fibaro.alert(\"push\", {userID}, \"PM10 \"..pm10 ..\" µg/m³\" ..\" level SATISFACTORY (Minor breathing discomfort to sensitive people)\")\n      self:debug(\"PM10 level SATISFACTORY (Minor breathing discomfort to sensitive people)\",pm10 ..\" µg/m³\")\n    end\n  end\n  -- PM10 breakpoint 101 - 250 MODERATELY POLLUTED Breathing discomfort to asthma patients, elderly and children\n  if (tonumber(pm10) >= 101 and tonumber(pm10) <= 250) then\n    pm10Text = \"MODERATELY POLLUTED\"\n    if (pm10prev < 101 or pm10prev > 250) then\n      fibaro.alert(\"push\", {userID}, \"PM10 \"..pm10 ..\" µg/m³\" ..\" level MODERATELY POLLUTED Breathing discomfort to asthma patients, elderly and children\")\n      self:debug(\"PPM10 level MODERATELY POLLUTED Breathing discomfort to asthma patients, elderly and children\",pm10 ..\" µg/m³\")\n    end\n  end\n  -- PM10 breakpoint 251 - 350 POOR (Breathing discomfort to all)\n  if (tonumber(pm10) >= 251 and tonumber(pm10) <= 350) then\n    pm10Text = \"POOR\"\n    if (pm10prev < 251 or pm10prev > 350) then\n      fibaro.alert(\"push\", {userID}, \"PM10 \"..pm10 ..\" µg/m³\" ..\" level POOR (Breathing discomfort to all)\")\n      self:debug(\"PM10 level POOR (Breathing discomfort to all)\",pm10 ..\" µg/m³\")\n    end\n  end\n  -- PM10 breakpoint 351 - 430 VERY POOR (Respiratory illness on prolonged exposure)\n  if (tonumber(pm10) >= 351 and tonumber(pm10) <= 439) then\n    pm10Text = \"VERY POOR\"\n    if (pm10prev < 351 or pm10prev > 430) then\n      fibaro.alert(\"push\", {userID}, \"PM10 \"..pm10 ..\" µg/m³\" ..\" level VERY POOR (Respiratory illness on prolonged exposure)\")\n      self:debug(\"PM10 level VERY POOR (Respiratory illness on prolonged exposure)\",pm10 ..\" µg/m³\")\n    end\n  end\n  -- PM10 breakpoint 430+ SEVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\n  if (tonumber(pm10) >= 439 ) then\n    pm10Text = \"SEVERE\"\n    if  (pm10prev < 430) then\n      fibaro.alert(\"push\", {userID}, \"PM10 \"..pm10 ..\" µg/m³\" ..\" level SEVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\")\n      self:debug(\"PM10 level EVERE (Health impact even on light physical work. Serious impact on people with heart/lung disease)\",pm10 ..\" µg/m³\")\n    end\n  end\n\n  if tonumber(pm10) > tonumber(pm10prev) then\n    pm10Trend = \" ↑\"\n  elseif tonumber(pm10) < tonumber(pm10prev) then\n    pm10Trend = \" ↓\"\n  else\n    pm10Trend = \" =\"\n  end\n\n  -- Update properties for PM10 sensor\n  self:updateProperty(\"value\",tonumber(pm10)) \n  self:updateProperty(\"unit\", \"㎍/㎥\")\n  self:updateProperty(\"log\", pm10Text ..pm10Trend)\nend\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables()\n  ipAddress = self:getVariable(\"ipAddress\")\n  path = self:getVariable(\"path\")\n  interval = tonumber(self:getVariable(\"interval\")) \n  userID = tonumber(self:getVariable(\"userID\")) \n  bme280Sensor = self:getVariable(\"bme280Sensor\")\n  icon = tonumber(self:getVariable(\"icon\")) \n\n  -- Check existence of the mandatory variables, if not, create them with default values\n  if ipAddress == \"\" or ipAddress == nil then\n    ipAddress = \"192.168.4.1\" -- Default IP address is 192.168.4.1\n    self:setVariable(\"ipAddress\",ipAddress)\n    self:trace(\"Added QuickApp variable ipAddress\")\n  end\n  if path ==\"\" or path == nil then\n    path = \"/data.json\" -- Default path is /data.json\n    self:setVariable(\"path\",path)\n    self:trace(\"Added QuickApp variable path\")\n  end\n  if interval == \"\" or interval == nil then\n    interval = \"146\" -- Default interval is 146, normally the sensor renews its readings every 145 seconds \n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end\n  if userID == \"\" or userID == nil then \n    userID = \"2\" -- Default userID\n    self:setVariable(\"userID\",userID)\n    self:trace(\"Added QuickApp variable iserID\")\n    userID = tonumber(userID)\n  end\n  if bme280Sensor == \"\" or bme280Sensor == nil then \n    bme280Sensor = \"true\" -- Default bme280Sensor\n    self:setVariable(\"bme280Sensor\",bme280Sensor)\n    self:trace(\"Added QuickApp variable bme280Sensor\")\n  end\n\n  if bme280Sensor == \"true\" then \n    bme280Sensor = true \n  elseif bme280Sensor == \"false\" then \n    bme280Sensor = false\n  end\n\n  if icon == \"\" or icon == nil then \n    icon = \"0\" -- Default icon\n    self:setVariable(\"icon\",icon)\n    self:trace(\"Added QuickApp variable icon\")\n    icon = tonumber(icon)\n  end\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = \"AIR_QUALITY_SENSOR_\"..self.id\n  self:debug(\"onInit\") \n  self:getQuickAppVariables() \n\n  if icon ~= 0 then \n    self:updateProperty(\"deviceIcon\", icon) -- set user defined icon\n  end\n\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n      local initChildData = { \n        {className=\"PolutionSensorTemp\", name=\"AQ Temperature\", type=\"com.fibaro.temperatureSensor\", value=0, unit=\"°C\"},\n        {className=\"PolutionSensorHumid\", name=\"AQ Humidity\", type=\"com.fibaro.humiditySensor\", value=0, unit=\"%\"},\n        {className=\"PolutionSensorPressure\", name=\"AQ Pressure\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"hPa\"},\n        {className=\"PolutionSensorPM25\", name=\"AQ PM2.5\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"µg/m³\"},\n        {className=\"PolutionSensorPM10\", name=\"AQ PM10\", type=\"com.fibaro.multilevelSensor\", value=0, unit=\"µg/m³\"},\n      }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {},\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\n\n-- Start of reading the data from the sensor\n  local http = net.HTTPClient({timeout=5000})\n\n  local pm25prev,pm10prev = 0,0\n  local pm10Text,pm25Text,pm25Trend,pm10Trend = \"\",\"\",\"\",\"\"\n  local url = \"http://\" ..ipAddress ..path\n\n  --self:debug(\"-------------- QUICKAPP AIR QUALITY SENSOR--------------\")\n\n\n  local function collectData()\n    http:request(url, {\n        options={\n          headers = {\n            Accept = \"application/json\"\n          }, \n          method = 'GET'\n        },        \n        success = function(response)\n          --self:debug(\"response status:\", response.status) \n          --self:debug(\"headers:\", response.headers[\"Content-Type\"]) \n          local apiResult = response.data\n          --self:debug(\"Api result: \",apiResult) \n\n          local jsonTable = json.decode(apiResult) -- JSON decode from api to lua-table\n          local data  = {}\n\n          -- Get the values\n          data.pm10 = jsonTable.sensordatavalues[1].value\n          data.pm25 = jsonTable.sensordatavalues[2].value\n          data.temperature = jsonTable.sensordatavalues[3].value\n          if bme280Sensor then \n            data.pressure = string.format(\"%.0f\",tonumber(jsonTable.sensordatavalues[4].value)/100)\n            data.humidity = string.format(\"%.0f\",tonumber(jsonTable.sensordatavalues[5].value))\n            data.wifisignal = jsonTable.sensordatavalues[10].value\n          else\n            data.humidity = string.format(\"%.0f\",tonumber(jsonTable.sensordatavalues[4].value))\n            data.wifisignal = jsonTable.sensordatavalues[9].value\n          end\n          data.age = jsonTable.age\n          data.firmware = jsonTable.software_version\n\n          -- Create labelText\n          data.labelText = \"Measurement: \" ..os.date(\"%d-%m-%Y %X\", os.time()-data.age) ..\"\\n\" ..\"\\n\"\n          data.labelText = data.labelText ..\"PM2.5: \" ..data.pm25 ..\" µg/m³\" ..\"\\n\"\n          data.labelText = data.labelText ..\"PM10: \" ..data.pm10 ..\" µg/m³\" ..\"\\n\"\n          data.labelText = data.labelText ..\"Temperature: \" ..data.temperature ..\" °C\" ..\"\\n\"\n          data.labelText = data.labelText ..\"Humidity: \" ..data.humidity ..\" %\" ..\"\\n\"\n          if bme280Sensor then\n            data.labelText = data.labelText ..\"Pressure: \" ..data.pressure ..\" hPa\" ..\"\\n\"\n          end\n          data.labelText = data.labelText ..\"\\n\" ..\"WiFi signal: \" ..data.wifisignal ..\" dBm\" ..\"\\n\"\n          data.labelText = data.labelText ..\"Firmware version:  \" ..data.firmware \n\n          -- Update label\n          self:updateView(\"label\", \"text\", data.labelText)\n\n          -- Update properties\n          self:updateProperty(\"log\", os.date(\"%d-%m-%Y %X\", os.time()-data.age) ..\"\\nWiFi \" ..data.wifisignal ..\"dBm\")\n\n          data.pm25prev=pm25prev\n          data.pm10prev=pm10prev\n\n          for id,child in pairs(self.childDevices) do \n            child:updateValue(data,userID) \n          end\n\n          pm25prev = tonumber(data.pm25)\n          pm10prev = tonumber(data.pm10)\n\n          --self:debug(\"Measurements:  \", data.labelText)\n          --self:debug(\"--------------------- END --------------------\")\n        end,\n        error = function(error)\n          self:error(\"error: \" ..json.encode(error))\n          self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n        end\n      }) \n\n    fibaro.setTimeout(interval*1000, collectData) -- Check every [interval] seconds for new data\n  end\n\n  collectData() -- start checking data \nend\n"}]}